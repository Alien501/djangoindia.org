# Python imports
import zoneinfo

# Django imports
from django_filters.rest_framework import DjangoFilterBackend

# Third-party imports
from rest_framework import status
from rest_framework.exceptions import APIException
from rest_framework.filters import SearchFilter
from rest_framework.permissions import IsAuthenticated
from rest_framework.views import APIView
from rest_framework.viewsets import ModelViewSet

from django.conf import settings
from django.utils import timezone


class TimezoneMixin:
    """
    Mixin to handle timezone activation based on the authenticated user's settings.

    This mixin ensures that all requests are processed with the appropriate timezone
    set according to the user's preference. If the user is not authenticated,
    it deactivates the timezone settings.
    """

    def initial(self, request, *args, **kwargs):
        """
        Overrides the default `initial` method to activate or deactivate the timezone.

        If the request comes from an authenticated user, their specified timezone is activated.
        Otherwise, timezone settings are deactivated.

        Args:
            request (Request): The incoming request.
        """
        super().initial(request, *args, **kwargs)
        if request.user.is_authenticated:
            timezone.activate(zoneinfo.ZoneInfo(request.user.user_timezone))
        else:
            timezone.deactivate()


class BaseViewSet(TimezoneMixin, ModelViewSet):
    """
    Base viewset that provides default configurations for API views.

    This class extends `ModelViewSet` and includes:
    - Authentication enforcement (only authenticated users can access).
    - Filtering support using DjangoFilterBackend and SearchFilter.
    - Automatic timezone handling via `TimezoneMixin`.
    - Enhanced exception handling for queryset retrieval.
    """

    model = None
    permission_classes = [IsAuthenticated]
    filter_backends = (DjangoFilterBackend, SearchFilter)
    filterset_fields = []
    search_fields = []

    def get_queryset(self):
        """
        Retrieves the queryset for the view.

        Returns:
            QuerySet: The queryset associated with the view's model.

        Raises:
            APIException: If the queryset retrieval fails, returns a 400 error.
        """
        try:
            return self.queryset or self.model.objects.all()
        except Exception as e:
            raise APIException("Please check the view", status.HTTP_400_BAD_REQUEST)

    def filter_queryset(self, queryset):
        """
        Applies filtering to the given queryset using the configured filter backends.

        Args:
            queryset (QuerySet): The original queryset.

        Returns:
            QuerySet: The filtered queryset.
        """
        for backend in list(self.filter_backends):
            queryset = backend().filter_queryset(self.request, queryset, self)
        return queryset

    def dispatch(self, request, *args, **kwargs):
        """
        Handles the request dispatching, including logging query counts in debug mode.

        If an exception occurs, it is caught and handled appropriately.

        Args:
            request (Request): The incoming request.

        Returns:
            Response: The response generated by the view.
        """
        try:
            response = super().dispatch(request, *args, **kwargs)
            if settings.DEBUG:
                from django.db import connection

                print(
                    f"{request.method} - {request.get_full_path()} of Queries: {len(connection.queries)}"
                )
            return response
        except Exception as exc:
            response = self.handle_exception(exc)
            return exc


class BaseAPIView(TimezoneMixin, APIView):
    """
    Base API view that provides default configurations for API views.

    This class extends `APIView` and includes:
    - Authentication enforcement (only authenticated users can access).
    - Filtering support using DjangoFilterBackend and SearchFilter.
    - Automatic timezone handling via `TimezoneMixin`.
    - Enhanced exception handling.

    """

    permission_classes = [IsAuthenticated]
    filter_backends = (DjangoFilterBackend, SearchFilter)
    filterset_fields = []
    search_fields = []

    def filter_queryset(self, queryset):
        """
        Applies filtering to the given queryset using the configured filter backends.

        Args:
            queryset (QuerySet): The original queryset.

        Returns:
            QuerySet: The filtered queryset.
        """
        for backend in list(self.filter_backends):
            queryset = backend().filter_queryset(self.request, queryset, self)
        return queryset

    def dispatch(self, request, *args, **kwargs):
        """
        Handles the request dispatching, including logging query counts in debug mode.

        If an exception occurs, it is caught and handled appropriately.

        Args:
            request (Request): The incoming request.

        Returns:
            Response: The response generated by the view.
        """
        try:
            response = super().dispatch(request, *args, **kwargs)
            if settings.DEBUG:
                from django.db import connection

                print(
                    f"{request.method} - {request.get_full_path()} of Queries: {len(connection.queries)}"
                )
            return response
        except Exception as exc:
            response = self.handle_exception(exc)
            return exc
